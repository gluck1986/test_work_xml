// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	datasource "gluck1986/test_work_xml/internal/datasource"

	mock "github.com/stretchr/testify/mock"
)

// ISdnSyncroniser is an autogenerated mock type for the ISdnSyncroniser type
type ISdnSyncroniser struct {
	mock.Mock
}

// Init provides a mock function with given fields: ctx, parser
func (_m *ISdnSyncroniser) Init(ctx context.Context, parser datasource.ISdnParser) error {
	ret := _m.Called(ctx, parser)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datasource.ISdnParser) error); ok {
		r0 = rf(ctx, parser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsIdle provides a mock function with given fields:
func (_m *ISdnSyncroniser) IsIdle() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Syncronise provides a mock function with given fields:
func (_m *ISdnSyncroniser) Syncronise() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewISdnSyncroniser interface {
	mock.TestingT
	Cleanup(func())
}

// NewISdnSyncroniser creates a new instance of ISdnSyncroniser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISdnSyncroniser(t mockConstructorTestingTNewISdnSyncroniser) *ISdnSyncroniser {
	mock := &ISdnSyncroniser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

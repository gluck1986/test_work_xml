// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	service "gluck1986/test_work_xml/internal/service"

	mock "github.com/stretchr/testify/mock"
)

// ISyncroniseVisor is an autogenerated mock type for the ISyncroniseVisor type
type ISyncroniseVisor struct {
	mock.Mock
}

// GetStatus provides a mock function with given fields:
func (_m *ISyncroniseVisor) GetStatus() (service.SyncroniserState, error) {
	ret := _m.Called()

	var r0 service.SyncroniserState
	var r1 error
	if rf, ok := ret.Get(0).(func() (service.SyncroniserState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() service.SyncroniserState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(service.SyncroniserState)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISyncroniseVisor interface {
	mock.TestingT
	Cleanup(func())
}

// NewISyncroniseVisor creates a new instance of ISyncroniseVisor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISyncroniseVisor(t mockConstructorTestingTNewISyncroniseVisor) *ISyncroniseVisor {
	mock := &ISyncroniseVisor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
